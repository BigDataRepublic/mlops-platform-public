apiVersion: v1
kind: Service
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
  annotations:
    cloud.google.com/backend-config: '{"default": "config-iap-http"}'
    cloud.google.com/neg: '{"ingress":false}'
spec:
  type: NodePort
  selector:
    istio: ingressgateway
  ports:
    - port: 80
      name: http2
    - port: 443
      name: https
    - port: 15021
      name: status-port
      nodePort: 31021
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  template:
    metadata:
      annotations:
        # Select the gateway injection template (rather than the default sidecar template)
        inject.istio.io/templates: gateway
      labels:
        # Set a unique label for the gateway. This is required to ensure Gateways can select this workload
        istio: ingressgateway
        # Enable gateway injection. If connecting to a revisioned control plane, replace with "istio.io/rev: revision-name"
        sidecar.istio.io/inject: "true"
    spec:
      containers:
        - name: istio-proxy
          image: auto # The image will automatically update each time the pod starts.
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: iap-gateway
  namespace: istio-ingress
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
# Set up roles to allow reading credentials for TLS
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: istio-ingressgateway-sds
  namespace: istio-ingress
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: istio-ingressgateway-sds
  namespace: istio-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-ingressgateway-sds
subjects:
  - kind: ServiceAccount
    name: default
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.gcp.kubernetes.io/pre-shared-cert: mlops-ssl
    kubernetes.io/ingress.global-static-ip-name: load-balancer-ip
    networking.gke.io/v1beta1.FrontendConfig: istio-frontend-config
  name: istio
  namespace: istio-ingress
spec:
  defaultBackend:
    service:
      name: istio-ingressgateway
      port:
        number: 80
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: config-iap-http
  namespace: istio-ingress
spec:
  healthCheck:
    checkIntervalSec: 2
    timeoutSec: 1
    healthyThreshold: 1
    unhealthyThreshold: 10
    port: 31021
    type: HTTP
    requestPath: /healthz/ready
  iap:
    enabled: true
    oauthclientCredentials:
      secretName: iap-oauth-credentials
---
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: istio-frontend-config
  namespace: istio-ingress
spec:
  redirectToHttps:
    enabled: true
